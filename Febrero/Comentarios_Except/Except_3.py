def try_syntax(numerator, denominator):                         #Inicializacion de una funcion que recibe como nombre "try_syntax", esta funcion recibe dos parametros "numerator" y "denominator" entre parentesis y por ultimo para dar paso a las intrucciones que poseera la funcion se debe insertar dos puntos.
    try:                                                        #identado al bloque de la funcion "try_syntax" se invoca la funcion try que permitira validar y evaluar operaciones a partir de una serie de instrucciones seguido de dos puntos para dar paso al bloque.
        print(f'In the try block: {numerator}/{denominator}')   #implementacion de la funcion print que permite mostrar en pantalla lo que se encuentre dentro de los parantesis, se hara uso de una plantilla literal donde se expresara literalmente lo que se encuentre dentro de las comillas despues de la letra "f", se imprimira la division de los argumentos dados en la funcion "try_sytax". 
        result = numerator / denominator                        #se inicializa una variable dentro del bloque "try" llamada "result" a la cual se le asignara la division de los parametros "numerator" y "denominator".
    except ZeroDivisionError as zde:                            #uso de la funcion except fuera del bloque "try" que cumple con la capacidad de especificar el tipo de error con el cual se trabajara para ser distinguido, para este caso se usara un error para division entre cero "ZeroDivisionError" y este sera representado como "zte".
        print(zde)                                              #identada al bloque "except" la funcion print imprime la excepcion ejecutada anteriormente.
    else:                                                       #por medio de la palabra reservada para operador condicional "else" seguido de dos puntos se ejecutaran las instrucciones por falso en caso de que no se cumpliesen las acciones anteriores.
        print('The result is:', result)                         #print muestra una cadena de texto separando con una coma la varible deseada.
      return result                                             #se hace uso de la funcion "return" que permite regresar la variable en la cual fue almacenada la operacion de los argumentos dados en la funcion definida.
    finally:                                                    #se usa la palabra reservada "finally" seguido de dos puntos con el fin de dar por terminado el bloque de prueba "try" compuesto de funciones subsecuentes.
        print('Exiting')                                        #identada a la funcion "finally" print muestra un mensaje predifinido. 
        #return "Fallo por zero"                                #linea de codigo comentada, retorna por medio de "return" una cadena de texto entre comillas
#print(try_syntax(12, 4))                                       #linea de codigo comentada, imprime la funcion "try_syntax" con valores que seran almacenados en los parametros de la funcion definida para asi ser procesados gracias a los datos dados.
print(try_syntax(11, 0))                                        #imprime la funcion "try_syntax" con valores que seran almacenados en los parametros de la funcion definida para asi ser procesados y afectar la ejecucion de la funci√≥n.
